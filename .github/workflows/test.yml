name: Test API Endpoints

on:
  push:
    branches-ignore: [ main ]  # Run on push to any branch except main
  workflow_dispatch:   # Allow manual triggering

env:
  CONTAINER_NAME: test-api-container
  IMAGE_NAME: test-api:latest
  PORT: 8080

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pipx
      run: |
        python -m pip install --user pipx
        python -m pipx ensurepath
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install pytest with pipx
      run: |
        pipx install pytest

    - name: Inject requirements into pytest environment
      run: |
        # Install main requirements if they exist
        if [ -f requirements.txt ]; then
          echo "Installing main requirements into pytest environment..."
          while read -r requirement; do
            # Skip empty lines and comments
            if [[ ! -z "$requirement" && ! "$requirement" =~ ^[[:space:]]*# ]]; then
              echo "Installing: $requirement"
              pipx inject pytest "$requirement" || echo "Warning: Failed to install $requirement"
            fi
          done < requirements.txt
        fi

        # Install test requirements if they exist
        if [ -f tests/requirements.txt ]; then
          echo "Installing test requirements into pytest environment..."
          while read -r requirement; do
            # Skip empty lines and comments
            if [[ ! -z "$requirement" && ! "$requirement" =~ ^[[:space:]]*# ]]; then
              echo "Installing: $requirement"
              pipx inject pytest "$requirement" || echo "Warning: Failed to install $requirement"
            fi
          done < tests/requirements.txt
        fi

        # Verify pytest environment
        echo "Pytest environment packages:"
        pipx list --include-injected

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }} .

    - name: Start container
      run: |
        docker run -d \
          --name ${{ env.CONTAINER_NAME }} \
          -p ${{ env.PORT }}:${{ env.PORT }} \
          ${{ env.IMAGE_NAME }}

    - name: Wait for container to be ready
      run: |
        echo "Waiting for API to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:${{ env.PORT }}/health; do sleep 2; done'
        echo "API is ready!"

    - name: Show container logs (for debugging)
      run: |
        echo "Container logs:"
        docker logs ${{ env.CONTAINER_NAME }}

    - name: Run all pytest tests
      run: |
        cd tests
        pytest . -v -s --tb=short

    - name: Show container logs on failure
      if: failure()
      run: |
        echo "Container logs on failure:"
        docker logs ${{ env.CONTAINER_NAME }}

    - name: Stop and remove container
      if: always()
      run: |
        docker stop ${{ env.CONTAINER_NAME }} || true
        docker rm ${{ env.CONTAINER_NAME }} || true
