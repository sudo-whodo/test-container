name: Dependabot Auto-Merge

on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled]

jobs:
  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    permissions:
      contents: write
      pull-requests: write
      checks: read

    steps:
    - name: Generate GitHub App Token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ steps.app-token.outputs.token }}

    - name: Analyze Dependabot PR
      id: analyze
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Analyzing Dependabot PR..."
        echo "Actor: ${{ github.actor }}"

        # Simple logic - auto-approve and auto-merge all Dependabot PRs
        # since this is a trusted bot and we have CI checks
        AUTO_APPROVE=true
        AUTO_MERGE=true
        MERGE_METHOD=squash
        REASON="Dependabot dependency update - safe to auto-merge"

        echo "auto_approve=${AUTO_APPROVE}" >> $GITHUB_OUTPUT
        echo "auto_merge=${AUTO_MERGE}" >> $GITHUB_OUTPUT
        echo "merge_method=${MERGE_METHOD}" >> $GITHUB_OUTPUT
        echo "reason=${REASON}" >> $GITHUB_OUTPUT

        echo "Analysis complete:"
        echo "  Auto Approve: ${AUTO_APPROVE}"
        echo "  Auto Merge: ${AUTO_MERGE}"
        echo "  Merge Method: ${MERGE_METHOD}"

    - name: Wait for CI checks
      id: wait-for-ci-checks
      if: steps.analyze.outputs.auto_approve == 'true'
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Waiting for CI checks to complete..."

        # Wait for checks to complete (max 10 minutes)
        TIMEOUT=600
        ELAPSED=0
        INTERVAL=30

        while [ $ELAPSED -lt $TIMEOUT ]; do
          # Get check runs for this commit
          CHECKS=$(gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs --jq '.check_runs[] | select(.name != "dependabot-auto-merge") | .status')

          # Count pending checks
          PENDING_CHECKS=$(echo "$CHECKS" | grep -c "in_progress\|queued" || echo "0")
          FAILED_CHECKS=$(echo "$CHECKS" | grep -c "failure" || echo "0")

          echo "Pending checks: $PENDING_CHECKS, Failed checks: $FAILED_CHECKS"

          if [ "$PENDING_CHECKS" -eq 0 ]; then
            if [ "$FAILED_CHECKS" -eq 0 ]; then
              echo "All checks passed!"
              echo "checks_passed=true" >> $GITHUB_OUTPUT
              break
            else
              echo "Some checks failed"
              echo "checks_passed=false" >> $GITHUB_OUTPUT
              break
            fi
          fi

          echo "Waiting ${INTERVAL}s for checks to complete..."
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done

        if [ $ELAPSED -ge $TIMEOUT ]; then
          echo "Timeout waiting for checks"
          echo "checks_passed=false" >> $GITHUB_OUTPUT
        fi

    - name: Approve PR
      if: steps.analyze.outputs.auto_approve == 'true'
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Auto-approving Dependabot PR..."

        gh pr review ${{ github.event.pull_request.number }} \
          --approve \
          --body "Auto-approved by GitHub App - Dependabot dependency update"

    - name: Merge PR
      if: steps.analyze.outputs.auto_merge == 'true' && steps.wait-for-ci-checks.outputs.checks_passed == 'true'
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Auto-merging Dependabot PR..."

        # Add a comment before merging
        gh pr comment ${{ github.event.pull_request.number }} \
          --body "Auto-merging this Dependabot PR - all checks passed"

        # Merge the PR
        gh pr merge ${{ github.event.pull_request.number }} \
          --${{ steps.analyze.outputs.merge_method }} \
          --delete-branch

    - name: Comment on checks failed
      if: steps.analyze.outputs.auto_approve == 'true' && steps.wait-for-ci-checks.outputs.checks_passed == 'false'
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Adding checks failed comment..."

        gh pr comment ${{ github.event.pull_request.number }} \
          --body "Auto-approval completed, but merge blocked due to failing CI checks"
