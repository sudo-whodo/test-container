name: Dependabot Auto-Merge

on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled]

jobs:
  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    permissions:
      contents: write
      pull-requests: write
      checks: read

    steps:
    - name: Generate GitHub App Token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ steps.app-token.outputs.token }}

    - name: Analyze Dependabot PR
      id: analyze
      run: |
        echo "Analyzing Dependabot PR"
        echo "Actor: ${{ github.actor }}"

        echo "auto_approve=true" >> $GITHUB_OUTPUT
        echo "auto_merge=true" >> $GITHUB_OUTPUT
        echo "merge_method=squash" >> $GITHUB_OUTPUT
        echo "reason=Dependabot dependency update" >> $GITHUB_OUTPUT

        echo "Analysis complete - will auto-approve and auto-merge"

    - name: Wait for CI checks
      id: wait-for-ci-checks
      if: steps.analyze.outputs.auto_approve == 'true'
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Waiting for CI checks to complete"

        TIMEOUT=600
        ELAPSED=0
        INTERVAL=30

        while [ $ELAPSED -lt $TIMEOUT ]; do
          # Get check status counts directly without storing in variable
          PENDING_CHECKS=$(gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs --jq '[.check_runs[] | select(.name != "dependabot-auto-merge") | select(.status == "in_progress" or .status == "queued")] | length')
          FAILED_CHECKS=$(gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs --jq '[.check_runs[] | select(.name != "dependabot-auto-merge") | select(.conclusion == "failure")] | length')

          echo "Pending: $PENDING_CHECKS, Failed: $FAILED_CHECKS"

          if [ "$PENDING_CHECKS" -eq 0 ]; then
            if [ "$FAILED_CHECKS" -eq 0 ]; then
              echo "All checks passed"
              echo "checks_passed=true" >> $GITHUB_OUTPUT
              break
            else
              echo "Some checks failed"
              echo "checks_passed=false" >> $GITHUB_OUTPUT
              break
            fi
          fi

          echo "Waiting ${INTERVAL}s"
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done

        if [ $ELAPSED -ge $TIMEOUT ]; then
          echo "Timeout waiting for checks"
          echo "checks_passed=false" >> $GITHUB_OUTPUT
        fi

    - name: Approve PR
      if: steps.analyze.outputs.auto_approve == 'true'
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Auto-approving Dependabot PR"
        gh pr review ${{ github.event.pull_request.number }} --approve --body "Auto-approved by GitHub App"

    - name: Merge PR
      if: steps.analyze.outputs.auto_merge == 'true' && steps.wait-for-ci-checks.outputs.checks_passed == 'true'
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Auto-merging Dependabot PR"
        gh pr comment ${{ github.event.pull_request.number }} --body "Auto-merging - all checks passed"
        gh pr merge ${{ github.event.pull_request.number }} --squash --delete-branch

    - name: Comment on checks failed
      if: steps.analyze.outputs.auto_approve == 'true' && steps.wait-for-ci-checks.outputs.checks_passed == 'false'
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      run: |
        echo "Adding checks failed comment"
        gh pr comment ${{ github.event.pull_request.number }} --body "Auto-approval completed but merge blocked due to failing checks"
